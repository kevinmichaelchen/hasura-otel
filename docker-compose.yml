version: "3.8"
services:
  # All traces and metrics from Go and Hasura will first go into the
  # OpenTelemetry Collector.
  collector:
    image: otel/opentelemetry-collector
    env_file:
      - env/newrelic.env
    # Expose OTel Collector's OTLP ports so Hasura can send it telemetry
    expose:
      - 4317 # otlp grpc
      - 4318 # otlp http
    ports:
      - "127.0.0.1:4317:4317"
      - "127.0.0.1:4318:4318"
    volumes:
      - ./otel-config.yml:/etc/otel-config.yaml
    command: "--config=/etc/otel-config.yaml"
    depends_on:
      - jaeger
      - openobserve

  # http://localhost:16686/
  jaeger:
    image: jaegertracing/all-in-one:1.50
    # Enable OTLP export of traces from OTel Collector to Jaeger
    environment:
      COLLECTOR_OTLP_ENABLED: true
    # Expose Jaeger's OTLP ports so the OTel Collector can write to Jaeger
    expose:
      - 4317 # otlp grpc
      - 4318 # otlp http
      - 14269 # jaeger collector, admin port
      - 5778 # serves sampling strategies
    ports:
      - "127.0.0.1:16686:16686" # jaeger ui

  # OpenObserve runs on http://localhost:5080
  # Use the credentials specified below and try it out yourself.
  # We configure the OTel Collector to export traces and metrics
  # to OpenObserve.
  openobserve:
    image: public.ecr.aws/zinclabs/openobserve:latest
    volumes:
      - ./data:/data
    environment:
      ZO_DATA_DIR: "/data"
      ZO_ROOT_USER_EMAIL: "kevinmichaelchen@gmail.com"
      ZO_ROOT_USER_PASSWORD: "Complexpass#123"
    expose:
      - 5080
    ports:
      - "127.0.0.1:5080:5080" # OpenObserve UI

  postgres:
    image: postgres:15
    env_file:
      - env/postgres.env
    restart: always
    ports:
      - "127.0.0.1:15432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 2s
      timeout: 3s
      retries: 5

  hasura:
    image: hasura/graphql-engine:v2.35.0.cli-migrations-v3
    env_file:
      - env/hasura.env
      - .env
    ports:
      - 127.0.0.1:${HASURA_PORT}:8080
    depends_on:
      - "postgres"
      - "collector"
    restart: always
    volumes:
      - ./hasura/schema:/var/schema
    environment:
      HASURA_GRAPHQL_MIGRATIONS_DIR: "/var/schema/migrations"
      HASURA_GRAPHQL_METADATA_DIR: "/var/schema/metadata"
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ENABLED_APIS: metadata,graphql,config,metrics
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
      HASURA_GRAPHQL_EXPERIMENTAL_FEATURES: "naming_convention"
      HASURA_GRAPHQL_DEFAULT_NAMING_CONVENTION: graphql-default
      HASURA_FF_NAMING_CONVENTION_SEP_2023: "True"
      REMOTE_SCHEMA_PETS_ENDPOINT: http://host.docker.internal:8081/query

volumes:
  pg_data:
